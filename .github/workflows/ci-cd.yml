name: CI-CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Build Go backend
        run: make build
      - name: Build React frontend
        run: |
          cd web
          npm ci
          npm run build

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Run Go tests (if any)
        run: |
          if ls internal/*_test.go 1> /dev/null 2>&1; then
            go test ./internal/... -v
          else
            echo "No Go tests found."
          fi
      - name: Lint and build frontend
        run: |
          cd web
          npm ci
          npm run lint
          npm run build

  tag:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      tag: ${{ steps.bump.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Bump version and create tag
        id: bump
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"

          if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            new_patch=$((patch + 1))
            new_tag="v${major}.${minor}.${new_patch}"
          else
            new_tag="v0.1.0"
          fi

          echo "New tag: $new_tag"
          git tag $new_tag
          git push origin $new_tag
          echo "tag=$new_tag" >> $GITHUB_OUTPUT

  publish:
    runs-on: ubuntu-latest
    needs: tag
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ needs.tag.outputs.tag }},ghcr.io/${{ github.repository }}:latest

  release:
    runs-on: ubuntu-latest
    needs: [tag, publish]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate changelog
        id: changelog
        run: |
          latest_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo '')
          if [ -n "$latest_tag" ]; then
            changelog=$(git log $latest_tag..HEAD --pretty=format:'* %s (%an)')
          else
            changelog=$(git log --pretty=format:'* %s (%an)')
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag.outputs.tag }}
          name: Release ${{ needs.tag.outputs.tag }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}

            ## Docker Image
            ```
            docker pull ghcr.io/${{ github.repository }}:${{ needs.tag.outputs.tag }}
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
