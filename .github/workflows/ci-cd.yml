name: CI-CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  packages: write


jobs:
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: |
          cd web
          npm ci
      - name: Lint frontend
        run: |
          cd web
          npm run lint
      - name: Build frontend
        run: |
          cd web
          npm run build
      - name: Upload dist folder
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: web/dist/

  test:
    runs-on: ubuntu-latest
    needs: [frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: web/dist/
      - name: Verify dist folder
        run: |
          ls -la web/dist || echo "web/dist not found"
          if [ ! -d "web/dist" ] || [ -z "$(ls -A web/dist)" ]; then
            echo "ERROR: web/dist is missing or empty after artifact restore."
            exit 1
          fi
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
      - name: Run Go tests (if any)
        run: |
          if ls internal/*_test.go 1> /dev/null 2>&1; then
            go test ./internal/... -v
          else
            echo "No Go tests found."
          fi

  tag:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    outputs:
      tag: ${{ steps.bump.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Bump version and create tag
        id: bump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"

          if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            new_patch=$((patch + 1))
            new_tag="v${major}.${minor}.${new_patch}"
          else
            new_tag="v0.1.0"
          fi

          echo "New tag: $new_tag"

          # Check if tag already exists
          if git rev-parse "refs/tags/$new_tag" >/dev/null 2>&1; then
            echo "Tag $new_tag already exists, skipping tag creation"
            echo "tag=$new_tag" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Create and push the new tag
          git tag $new_tag

          # Configure git to use the token for pushing
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin $new_tag
          echo "tag=$new_tag" >> $GITHUB_OUTPUT

  docker:
    runs-on: ubuntu-latest
    needs: tag
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ needs.tag.outputs.tag }},ghcr.io/${{ github.repository }}:latest

  build:
    runs-on: ubuntu-latest
    needs: [tag, frontend]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            platform: linux-x64
          - goos: linux
            goarch: arm64
            platform: linux-arm64
          - goos: linux
            goarch: arm
            goarm: 7
            platform: linux-arm
          - goos: linux
            goarch: 386
            platform: linux-x86
          - goos: darwin
            goarch: amd64
            platform: macos-x64
          - goos: darwin
            goarch: arm64
            platform: macos-arm64
          - goos: windows
            goarch: amd64
            platform: windows-x64
          - goos: windows
            goarch: 386
            platform: windows-x86
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: web/dist/
      - name: Verify dist folder
        run: |
          ls -la web/dist || echo "web/dist not found"
          if [ ! -d "web/dist" ] || [ -z "$(ls -A web/dist)" ]; then
            echo "ERROR: web/dist is missing or empty after artifact restore."
            exit 1
          fi
      - name: Verify frontend build
        run: |
          echo "Checking frontend build files:"
          ls -la web/dist/ || echo "web/dist/ not found"
          if [ ! -d "web/dist" ] || [ -z "$(ls -A web/dist)" ]; then
            echo "ERROR: web/dist is missing or empty. Frontend build must be completed in the 'frontend' job."
            exit 1
          fi
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        run: |
          make build
      - name: Create archive
        run: |
          binary_name="trailarr"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            binary_name="trailarr.exe"
          fi
          archive_name="trailarr-${{ needs.tag.outputs.tag }}-${{ matrix.platform }}"
          mkdir -p $archive_name
          cp bin/$binary_name $archive_name/
          cp README.md $archive_name/ 2>/dev/null || true
          cp LICENSE $archive_name/ 2>/dev/null || true

          echo "Creating archive for ${{ matrix.platform }}..."
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -r ${archive_name}.zip $archive_name
            echo "Created: ${archive_name}.zip"
            ls -la ${archive_name}.zip
          else
            tar -czf ${archive_name}.tar.gz $archive_name
            echo "Created: ${archive_name}.tar.gz"
            ls -la ${archive_name}.tar.gz
          fi
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trailarr-${{ matrix.platform }}
          path: |
            trailarr-${{ needs.tag.outputs.tag }}-${{ matrix.platform }}.tar.gz
            trailarr-${{ needs.tag.outputs.tag }}-${{ matrix.platform }}.zip
          if-no-files-found: ignore

  release:
    runs-on: ubuntu-latest
    needs: [tag, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true
      - name: List downloaded files
        run: |
          echo "Downloaded files:"
          find ./artifacts -type f -name "*.tar.gz" -o -name "*.zip" | sort
      - name: Generate changelog
        id: changelog
        run: |
          latest_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo '')
          if [ -n "$latest_tag" ]; then
            changelog=$(git log $latest_tag..HEAD --pretty=format:'* %s (%an)')
          else
            changelog=$(git log --pretty=format:'* %s (%an)')
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.tag.outputs.tag }}
          name: Release ${{ needs.tag.outputs.tag }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}

            ## Docker Image
            ```
            docker pull ghcr.io/${{ github.repository }}:${{ needs.tag.outputs.tag }}
            ```

            ## Downloads
            Download the appropriate binary for your platform below.
          files: |
            ./artifacts/*.tar.gz
            ./artifacts/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
